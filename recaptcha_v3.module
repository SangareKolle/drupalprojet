<?php

/**
 * @file
 * Contains recaptcha_v3.module.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Form\FormBuilderInterface;
use Drupal\Core\Form\FormState;
use Drupal\recaptcha_v3\Entity\ReCaptchaV3Action;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function recaptcha_v3_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the recaptcha_v3 module.
    case 'help.page.recaptcha_v3':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('reCAPTCHA v3 returns a score for each request without user friction. The score is based on interactions with your site and enables you to take an appropriate action for your site.') . '</p>';
      $output .= '<h3>' . t('Configuration') . '</h3>';
      $output .= '<p>' . t('At first you need to create at least one action: populate action name<sup>1</sup>, choose score threshold<sup>2</sup> and select action on user verification fail<sup>3</sup>.') . '</p>';
      $output .= '<ol>';
      $output .= '<li>' . t('reCAPTCHA v3 introduces a new concept: actions. Actions name will be displayed in detailed break-down of data for your top ten actions in the <a href="@admin_console_link" target="_blank">admin console</a>', ['@admin_console_link' => 'https://g.co/recaptcha/admin']) . '</li>';
      $output .= '<li>' . t('reCAPTCHA v3 returns a score (1.0 is very likely a good interaction, 0.0 is very likely a bot). Based on the score, you can take variable action in the context of your site.') . '</li>';
      $output .= '<li>' . t('You could specify additional validation challenge, for failed recaptcha v3 validations. If you leave empty "Default challenge type" and "Challenge" for concrete action, user could not submit form if his validation failed.') . '</li>';
      $output .= '</ol>';
      return $output;
    default:
  }
}

/**
 * Implements hook_library_info_alter().
 */
function recaptcha_v3_library_info_alter(&$libraries, $extension) {
  if ($extension === 'recaptcha_v3' && isset($libraries['google.recaptcha'])) {
    $site_key = \Drupal::config('recaptcha_v3.settings')->get('site_key');
    $key = 'https://www.google.com/recaptcha/api.js?render=' . $site_key;
    $js = array_shift($libraries['google.recaptcha']['js']);
    $libraries['google.recaptcha']['js'][$key] = $js;
  }
}

/**
 * Implements hook_element_info_alter().
 *
 * Place recaptcha v3 preprocess function at the beginning, so in this way
 * it is possible to verify captcha and in case of fail, replace it by
 * fallback captcha challenge.
 *
 * Add one more process function to the end to display recaptcha_v3 error if
 * happens.
 */
function recaptcha_v3_element_info_alter(array &$info) {
  array_unshift($info['captcha']['#process'], 'recaptcha_v3_pre_captcha_element_process');
  $info['captcha']['#process'][] = 'recaptcha_v3_post_captcha_element_process';
}

/**
 * Perform replacing of the recaptcha element by fallback challenge.
 * This happens in two cases:
 *   1. form was submitted
 *   2. performed form API ajax request.
 *
 * @param $element
 * @param $form_state
 * @param $complete_form
 *
 * @return mixed
 */
function recaptcha_v3_pre_captcha_element_process(&$element, FormStateInterface $form_state, &$complete_form) {
  // Some alterations needed only if:
  // form was submitted or performed form API ajax request.
  if ($form_state->isProcessingInput()) {
    module_load_include('inc', 'captcha');
    [$captcha_type_module, $captcha_type_challenge] = _captcha_parse_captcha_type($element['#captcha_type']);

    if ($captcha_type_module !== 'recaptcha_v3') {
      return $element;
    }

    // If form_state storage has already verification response,
    // then replace reCAPTCHA v3 captcha by action fallback challenge.
    // If form is submitted and this is not ajax request, then need to replace
    // reCAPTCHA v3 element by fallback challenge because otherwise in case of
    // error form will not rebuild and recaptcha v3 element will returned again.
    $is_ajax_request = \Drupal::request()->query->has(FormBuilderInterface::AJAX_FORM_REQUEST);
    if (!$is_ajax_request || $form_state->has('recaptcha_v3')) {
      $action = ReCaptchaV3Action::load($captcha_type_challenge);
      $challenge = $action ? $action->get('challenge') : 'default';
      // Replacing 'default' challenge by the real captcha challenge.
      if ($challenge === 'default') {
        $challenge = \Drupal::config('recaptcha_v3.settings')
          ->get('default_challenge');
      }
      $form_state->setTemporaryValue('recaptcha_v3_action_name', $captcha_type_challenge);
      $element['#captcha_type'] = $challenge;
    }
  }

  return $element;
}

/**
 * Implements hook_captcha().
 */
function recaptcha_v3_captcha($op, $captcha_type = '', $captcha_sid = NULL) {
  switch ($op) {
    case 'list':
      return array_keys(ReCaptchaV3Action::loadMultiple());

    case 'generate':
      $captcha = [];
      if ($recaptcha_v3_action = ReCaptchaV3Action::load($captcha_type)) {
        $config = \Drupal::config('recaptcha_v3.settings');
        $action_name = $recaptcha_v3_action->id();
        $captcha['form']['captcha_response'] = [
          '#type' => 'hidden',
          '#default_value' => '',
          '#attributes' => [
            // Need add id, because element should have id or
            // 'selector' property should exist in #ajax array
            // to attaching event for triggering ajax request,
            'id' => Html::getUniqueId('recaptcha_v3_token'),
            'class' => ['recaptcha-v3-token'],
            'data-recaptcha-v3-action' => $action_name,
            'data-recaptcha-v3-site-key' => $config->get('site_key'),
          ],
          '#attached' => [
            'library' => [
              'recaptcha_v3/recaptcha_v3',
            ],
          ],
          '#ajax' => [
            'callback' => 'recaptcha_v3_ajax_callback',
            'event' => 'change',
          ],
        ];
        $captcha['solution'] = TRUE;
        $captcha['captcha_validate'] = 'recaptcha_v3_validate';
        $captcha['cacheable'] = TRUE;
      }
      return $captcha;
  }
}

/**
 * Replace captcha element #captcha_validate by reCAPTCHA v3 validation function
 * if real captcha type is reCAPTCHA v3 and it was not yet verify.
 *
 * @param $element
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $complete_form
 */
function recaptcha_v3_post_captcha_element_process(&$element, FormStateInterface $form_state, &$complete_form) {
  if ($form_state->getTemporaryValue('recaptcha_v3_action_name') && !$form_state->has('recaptcha_v3')) {
    $element['#captcha_validate'] = 'recaptcha_v3_validate';
  }
}


/**
 * CAPTCHA Callback; Validates the reCAPTCHA v3 code.
 */
function recaptcha_v3_validate($solution, $captcha_response, $element, FormStateInterface $form_state) {
  $captcha_type_challenge = $form_state->getTemporaryValue('recaptcha_v3_action_name');

  // reCAPTCHA v3 was verified in one of the previous request.
  if ($form_state->has('recaptcha_v3')) {
    return (bool) $form_state->get(['recaptcha_v3', 'status']);
  }
  // Verify submitted reCAPTCHA v3 token.
  $recaptcha_v3 = ReCaptchaV3Action::load($captcha_type_challenge) ?? ReCaptchaV3Action::createEmptyAction();
  $verification_response = $recaptcha_v3->verifyToken($captcha_response);
  // If we here, then token verification failed.
  if (!$verification_response['status']) {
    $error_message = \Drupal::config('recaptcha_v3.settings')
      ->get('error_message');
    $form_state->setError($element, $error_message);
  }
  $form_state->set('recaptcha_v3', $verification_response);
  return $verification_response['status'] === TRUE;
}

/**
 * AJAX callback; return captcha response.
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *
 * @return \Drupal\Core\Ajax\AjaxResponse
 */
function recaptcha_v3_ajax_callback(array $form, FormStateInterface $form_state) {
  $response = new AjaxResponse();
  $selector = '#' . $form['#id'] . ' .captcha';
  $response->addCommand(new ReplaceCommand($selector, $form['captcha']));
  return $response;
}

/**
 * Return error by code from response.
 * @param $code
 *
 * @return mixed
 */
function recaptcha_v3_error_by_code($code) {
  $error_codes =  [
    'action-mismatch' => t('Expected action did not match.'),
    'apk_package_name-mismatch' => t('Expected APK package name did not match.'),
    'bad-response' => t('Did not receive a 200 from the service.'),
    'challenge-timeout' => t('Challenge timeout.'),
    'connection-failed' => t('Could not connect to service.'),
    'invalid-input-response' => t('The response parameter is invalid or malformed.'),
    'missing-input-response' => t('The response parameter is missing.'),
    'hostname-mismatch' => t('Expected hostname did not match.'),
    'invalid-json' => t('The json response is invalid or malformed.'),
    'score-threshold-not-met' => t('Score threshold not met.'),
    'unknown-error' => t('Not a success, but no error codes received!'),
  ];
  return $error_codes[$code] ?? $error_codes['unknown-error'];
}
